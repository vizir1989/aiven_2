[tool.poetry]
name = "aiven"
version = "0.1.0"
description = ""
authors = ["vladislav.ninchuk"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
asyncpg = "^0.29.0"
pydantic = "^2.5.3"
pydantic-settings = "^2.1.0"
aiohttp = "^3.9.1"
validators = "^0.22.0"


[tool.poetry.group.dev.dependencies]
black = "^23.12.1"
autoflake = "^2.2.1"
flake8-black = "^0.3.6"
flake8-bugbear = "^23.12.2"
flake8-coding = "^1.3.2"
flake8-comprehensions = "^3.14.0"
flake8-debugger = "^4.1.2"
flake8-eradicate = "^1.5.0"
flake8-isort = "^6.1.1"
flake8-logging-format = "^0.9.0"
flake8-pie = "^0.16.0"
flake8-pytest-style = "^1.7.2"
flake8-quotes = "^3.3.2"
flake8-simplify = "^0.21.0"
flake8-commas = "^2.1.0"
flake8-return = "^1.2.0"
flake8-print = "^5.0.0"
flake8-use-pathlib = "^0.3.0"
flake8-cognitive-complexity = "^0.1.0"
flake8 = "^6.1.0"
flake8-annotations = "^3.0.1"
isort = "^5.13.2"
flake8-pyproject = "^1.2.3"
flake8-clean-block = "^0.1.2"
flake8-datetimez = "^20.10.0"
flake8-datetime-utcnow-plugin = "^0.1.2"
flake8-alphabetize = "^0.0.21"
flake8-pep585 = "^0.1.7"
pytest-cov = "^4.1.0"
pytest = "^7.4.3"
requests-mock = "^1.11.0"
pytest-randomly = "^3.15.0"
pytest-env = "^1.1.3"
pytest-mock = "^3.12.0"
pytest-asyncio = "^0.23.2"
pytest-postgresql = "^5.0.0"
psycopg = {extras = ["binary"], version = "^3.1.16"}
pytest-freezegun = "^0.4.2"
pytest-aiohttp = "^1.0.5"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.flake8]
exclude = "conf"
max-line-length = 120
no-accept-encodings = true
inline-quotes = '"'
# Ignoring:
# E203: white space before ':'. Because it's not black compatible
# E501: Line too long. Because we use soft line limit B950
# W503: Line break occurred before a binary operator. Because black
# W505: Maximum doc-string length. Because it's not black compatible
# B008: Do not perform function calls in argument defaults. Because FastAPI
# G200: Logging exception. Because sometime its needed
# PIE781: PIE781: assign-and-return. Because it's too noisy
ignore = "E203,E501,W503,W505,B008,G200,PIE781,EXE002,C416,ANN401,ANN101,ANN102"
select = "C,E,F,G,I,P,S,W,Q,T,B,B950,ANN,PIE"

[tool.black]
line-length = 120

[tool.isort]
line_length = 120
profile = "black"

[tool.pytest.ini_options]
python_files = ["test_*.py", "*_test.py", "tests_*.py", "*_tests.py"]
asyncio_mode = "auto"
postgresql_host = "127.0.0.1"
postgresql_port = "5432"
postgresql_user = "postgres"
postgresql_password = "postgres"
postgresql_dbname = "test"


env = [
    "DB_DSN=postgresql://postgres:postgres@127.0.0.1:5432/test",
]

[tool.coverage.report]
omit = [
    "tests/*",
    "__main__.py"
    ]

exclude_also = [
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    ]

[tool.autoflake]
check = false
in-place = true
recursive = true
exclude = ".git,venv,.venv,.mypy_cache,.pytest_cache,__pycache__,alembic,.idea,pypoetry,"
imports = ""
expand-star-imports = true
remove-all-unused-imports = true
ignore-init-module-imports = true
remove-duplicate-keys = true
remove-unused-variables = true
verbose = 0